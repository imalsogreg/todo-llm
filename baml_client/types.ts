/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum Tag {
  Work = "Work",
  Personal = "Personal",
  Errands = "Errands",
}

export interface AddItem {
  type: "add_item"
  title: string
  tags: (string | Tag)[]
  
}

export interface AdjustItem {
  type: "adjust_item"
  item_id: string
  title?: string | null
  completed_at?: number | null
  deleted?: boolean | null
  tags?: (string | Tag)[] | null
  
}

export interface GetDateTime {
  type: "get_date_time"
  
}

export interface MessageToUser {
  type: "message_to_user"
  message: string
  
}

export interface MyTodo {
  title: string
  description: string
  dueDate: string
  
}

export interface Query {
  message: string
  date_time: number
  
}

export interface State {
  tool_history: ToolCallResult[]
  todo_list: TodoList
  
}

export interface TodoItem {
  id: string
  title: string
  created_at: number
  completed_at?: number | null
  deleted: boolean
  tags: (string | Tag)[]
  
}

export interface TodoList {
  items: TodoItem[]
  
}

export interface ToolCallResult {
  tool_call: MessageToUser | AddItem | AdjustItem
  result?: number | null
  
}
